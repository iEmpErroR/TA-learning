Shader "Custom/GaussianBlur"
{
    Properties
    {
        _MainTex ("MainTex", 2D) = "white" {}
        _BlurSize ("Blur Size", Float) = 0.6
    }
    SubShader
    {
        CGINCLUDE
        #include "UnityCG.cginc"

        sampler2D _MainTex;
        float4 _MainTex_TexelSize;
        float _BlurSize;

        struct a2v {
            float4 vertex : POSITION;
            float2 texcoord : TEXCOORD0;
        };

        struct v2f {
            float4 pos : SV_POSITION;
            half2 uv[5] : TEXCOORD0;
        };

        v2f vertBlurVertical(a2v v)
        {
            v2f o;
            o.pos = UnityObjectToClipPos(v.vertex);
            half2 uv = v.texcoord;

            o.uv[0] = uv;
            o.uv[1] = uv + half2(0.0, _MainTex_TexelSize.y * 1) * _BlurSize;
            o.uv[2] = uv - half2(0.0, _MainTex_TexelSize.y * 1) * _BlurSize;
            o.uv[3] = uv + half2(0.0, _MainTex_TexelSize.y * 2) * _BlurSize;
            o.uv[4] = uv - half2(0.0, _MainTex_TexelSize.y * 2) * _BlurSize;

            return o;
        }

        v2f vertBlurHorizontal(a2v v)
        {
            v2f o;
            o.pos = UnityObjectToClipPos(v.vertex);
            half2 uv = v.texcoord;

            o.uv[0] = uv;
            o.uv[1] = uv + half2(_MainTex_TexelSize.x * 1, 0.0) * _BlurSize;
            o.uv[2] = uv - half2(_MainTex_TexelSize.x * 1, 0.0) * _BlurSize;
            o.uv[3] = uv + half2(_MainTex_TexelSize.x * 2, 0.0) * _BlurSize;
            o.uv[4] = uv - half2(_MainTex_TexelSize.x * 2, 0.0) * _BlurSize;

            return o;
        }

        half4 fragBlur(v2f i) : SV_Target
        {
            float weight[3] = { 0.4026, 0.2442, 0.0545 };
            half3 sum = tex2D(_MainTex, i.uv[0]) * weight[0];
            for (int i = 1; i < 5; i++)
                 sum += tex2D(_MainTex, i.uv[i]) * weight[i];
            
            return half4(sum.rgb, 1.0);
        }

        ENDCG

        ZTest Always ZWrite Off Cull Off

        Pass {
            Name "GAUSSIAN_BLUR_VERTICAL"

            CGPROGRAM

            #pragma vertex vertBlurVertical
            #pragma fragment fragBlur

            ENDCG
        }

        Pass {
            Name "GAUSSIAN_BLUR_HORIZONTAL"

            CGPROGRAM

            #pragma vertex vertBlurHorizontal
            #pragma fragment fragBlur

            ENDCG
        }
    }
    FallBack Off
}

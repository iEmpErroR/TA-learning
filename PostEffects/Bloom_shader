Shader "Custom/Chapter12-Bloom"
{
    Properties
    {
        _MainTex ("Base (RGB)", 2D) = "white" {}
        _Bloom ("Bloom (RGB)", 2D) = "black" {}
        _LuminanceThreshold ("Luminance Threshold", Float) = 0.5
        _BlurSize ("Blur Size", Float) = 0.6
    }
    SubShader
    {
        CGINCLUDE
        #include "UnityCG.cginc"

        sampler2D _MainTex;
        half4 _MainTex_TexelSize;
        sampler2D _Bloom;
        float _LuminanceThreshold;
        float _BlurSize;

        struct a2v {
            float4 vertex : POSITION;
            float2 texcoord : TEXCOORD0;
        };

        struct v2f {
            float4 pos : SV_POSITION;
            half2 uv : TEXCOORD0;
        };

        v2f vertExtractBright(a2v v) {
            v2f o;
            o.pos = UnityObjectToClipPos(v.vertex);
            o.uv = v.texcoord;
            
            return o;
        }

        half luminance(half4 color)
        {
            return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;
        }

        half4 fragExtractBright(v2f i) : SV_Target {
            half4 c = tex2D(_MainTex, i.uv);
            half val = clamp(luminance(c) - _LuminanceThreshold, 0.0, 1.0);

            return c * val;
        }

        struct v2fBloom {
            float4 pos : SV_POSITION;
            half4 uv : TEXCOORD0;
        };

        v2fBloom vertBloom(a2v v) {
            v2fBloom o;
            o.pos = UnityObjectToClipPos(v.vertex);
            o.uv.xy = v.texcoord;
            o.uv.zw = v.texcoord;
            
            return o;
        }

        half4 fragBloom(v2fBloom i) : SV_Target {
            half4 srcC = tex2D(_MainTex, i.uv.xy);
            half4 bloomC = tex2D(_Bloom, i.uv.zw);
            return half4(srcC.rgb + bloomC.rgb, srcC.a);
        }

        ENDCG

        ZTest Always ZWrite Off Cull Off

        Pass {
            CGPROGRAM

            #pragma vertex vertExtractBright
            #pragma fragment fragExtractBright

            ENDCG
        }

        UsePass "Custom/GaussianBlur/GAUSSIAN_BLUR_VERTICAL"

        UsePass "Custom/GaussianBlur/GAUSSIAN_BLUR_HORIZONTAL"

        Pass {
            CGPROGRAM

            #pragma vertex vertBloom
            #pragma fragment fragBloom

            ENDCG
        }
    }
    FallBack Off
}

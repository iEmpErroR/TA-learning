Shader "Custom/GlassRefraction"
{
    Properties
    {
        _BaseColor ("BaseColor", Color) = (1, 1, 1, 1)
        _BumpMap ("Normal Map", 2D) = "bump" {}
        _BumpScale ("BumpScale", Float) = 1
        _CubeMap ("Environment Cubemap", Cube) = "_Skybox" {}
        _Distortion ("Distortion", Range(0, 100)) = 10
        _RefractAmount ("Refraction Amount", Range(0.0, 1.0)) = 1.0
        _Specular ("Specular", Color) = (1, 1, 1, 1)
        _Gloss ("Gloss", Range(8, 256)) = 8
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" "Queue"="Geometry"}

        GrabPass { "_RefractionTex" }

        Pass
        {
            Tags { "LightMode"="ForwardBase" }
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fwdbase

            #include "UnityCG.cginc"
            #include "Lighting.cginc"
            #include "AutoLight.cginc"

            float4 _BaseColor;
            sampler2D _BumpMap;
            float4 _BumpMap_ST;
            float _BumpScale;
            samplerCUBE _CubeMap;
            float _Distortion;
            half _RefractAmount;
            sampler2D _RefractionTex;
            float4 _RefractionTex_TexelSize;
            float4 _Specular;
            float _Gloss;

            struct a2v
            {
                float4 vertex : POSITION;
                float2 texcoord : TEXCOORD0;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
            };

            struct v2f
            {
                float4 pos : SV_POSITION;
                float2 uv : TEXCOORD0;
                float4 TtoW0 : TEXCOORD1;
                float4 TtoW1 : TEXCOORD2;
                float4 TtoW2 : TEXCOORD3;
                float4 scrPos : TEXCOORD4;
                //SHADOW_COORDS(5)
            };

            v2f vert(a2v v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.scrPos = ComputeGrabScreenPos(o.pos);
                o.uv = TRANSFORM_TEX(v.texcoord, _BumpMap);
                //TRANSFER_SHADOW(o);

                float3 worldNormal = UnityObjectToWorldNormal(v.normal);
                float3 worldTangent = UnityObjectToWorldDir(v.tangent);
                float3 worldBinormal = cross(worldNormal, worldTangent) * v.tangent.w;
                float3 worldPos = mul(unity_ObjectToWorld, v.vertex.xyz);

                o.TtoW0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
                o.TtoW1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
                o.TtoW2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
                return o;
            }

            half4 frag(v2f i) : SV_Target
            {
                float3 worldPos = float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);
                half3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
                half3 worldLightDir = normalize(UnityWorldSpaceLightDir(worldPos));
                half3 halfDir = normalize(worldLightDir + worldViewDir);

                float3 bump = UnpackNormal(tex2D(_BumpMap, i.uv));
                bump.xy = bump.xy * _BumpScale;
                bump.z = sqrt(1.0 - saturate(dot(bump.xy, bump.xy)));
                float2 offset = bump.xy * _Distortion * _RefractionTex_TexelSize.xy;
                i.scrPos.xy = i.scrPos.xy + offset * i.scrPos.w;
                half3 refrColor = tex2D(_RefractionTex, i.scrPos.xy / i.scrPos.w).rgb;

                float3x3 TtoW = float3x3(i.TtoW0.xyz, i.TtoW1.xyz, i.TtoW2.xyz);
                bump = normalize(mul(TtoW, bump));

                half3 reflDir = reflect(-worldViewDir, bump);
                half3 reflColor = texCUBE(_CubeMap, reflDir);

                //half3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;
                //half3 diffuse = _LightColor0.rgb * _BaseColor.rgb * saturate(dot(bump, worldLightDir));
                //half3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(bump, halfDir)), _Gloss);
                //UNITY_LIGHT_ATTENUATION(atten, i, worldPos);

                half3 finalColor = reflColor * (1 - _RefractAmount) + refrColor * _RefractAmount;
                return half4(finalColor, 1.0);
            }
            ENDCG
        }
    }
    FallBack "VertexLit"

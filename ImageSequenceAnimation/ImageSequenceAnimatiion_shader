Shader "Custom/ImageSequenceAnimation"
{
    Properties
    {
        _Color ("Color", Color) = (1, 1, 1, 1)
        _MainTex ("Texture", 2D) = "white" {}
        _HorizontalAmount ("Horizontal Amount", Float) = 4
        _VerticalAmount ("Vertical Amount", Float) = 4
        _Speed ("Speed", Range(1, 100)) = 30
    }
    SubShader
    {
        Tags { "Queue"="Transparent" "RenderType"="Transparent" "IgnoreProjector"="True" }

        Pass
        {
            Tags { "LightMode"="ForwardBase" }

            ZWrite Off
            Blend SrcAlpha OneMinusSrcAlpha

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fwdbase

            #include "UnityCG.cginc"
            #include "Lighting.cginc"
            #include "AutoLight.cginc"

            half4 _Color;
            sampler2D _MainTex;
            float4 _MainTex_ST;
            float _HorizontalAmount;
            float _VerticalAmount;
            float _Speed;

            struct a2v
            {
                float4 vertex : POSITION;
                float2 texcoord : TEXCOORD0;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            v2f vert (a2v v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);

                return o;
            }

            half4 frag (v2f i) : SV_Target
            {
                float totalFrames = _HorizontalAmount * _VerticalAmount;
                float time = floor(_Time.y * _Speed);
                float frameIndex = fmod(time, totalFrames);

                float row = floor(frameIndex / _HorizontalAmount);
                float column = frameIndex - row * _HorizontalAmount;

                float2 tileSize = float2(1 / _HorizontalAmount, 1 / _VerticalAmount);
                float2 offset = float2(column * tileSize.x, (_VerticalAmount - 1 - row) * tileSize.y);
                float2 uv = float2(i.uv.x * tileSize.x + offset.x, i.uv.y * tileSize.y + offset.y);

                half4 boomColor = tex2D(_MainTex, uv);
                boomColor.rgb *= _Color.rgb;

                return boomColor;
            }
            ENDCG
        }
    }
}
